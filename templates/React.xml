<templateSet group="React">
  <template name="rea" value="class $NAME$ extends React.Component{&#10;render() {&#10;return (&#10;$BODY$&#10;);&#10;}&#10;}" description="React Component" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="reaf" value="import React from 'react';&#10;&#10;function() {&#10;return (&#10;$BODY$&#10;);&#10;}" description="React Component (function)" toReformat="true" toShortenFQNames="true">
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="curpro" value="import {currentPromotion} from &quot;redux/modules/currentPromotion&quot;;&#10;import {connect} from 'react-redux';&#10;&#10;@connect(state =&gt; ({&#10;promotion: currentPromotion(state)&#10;}))" description="Connect current class for current promotion" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="exrea" value="import React from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;export default class $NAME$ extends React.Component{&#10;render() {&#10;const {$prop$} = this.props;&#10;return (&#10;&lt;div&gt;&#10;$NAME$&#10;&lt;/div&gt;&#10;);&#10;}&#10;}&#10;&#10;&#10;&#10;$NAME$.propTypes = {&#10;  $prop$: PropTypes.$propType$.isRequired,&#10;};" description="Export default React Component" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(String)" defaultValue="&quot;ComponentName&quot;" alwaysStopAt="true" />
    <variable name="prop" expression="camelCase(String)" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="propType" expression="camelCase(String)" defaultValue="&quot;string&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="conn" value="import {connect} from 'react-redux';&#10;&#10;@connect(state =&gt; ({$SELECTOR$: $SELECTOR$(state)}))" description="@connect a Component" toReformat="false" toShortenFQNames="true">
    <variable name="SELECTOR" expression="" defaultValue="selector" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="iclt" value="import CenteredLeadText from &quot;features/components/text/CenteredLeadText&quot;;&#10;" description="import &lt;CenteredLeadText/&gt;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="imref" value="import React from 'react';&#10;import PropTypes from 'prop-types';&#10;" description="Import React" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="reduc" value="const defaultState = null;&#10;export default function reducer(state = defaultState, action) {&#10;switch (action.type) {&#10;case $ACTION$:&#10;return $BODY$;&#10;default:&#10;return state;&#10;}&#10;}&#10;" description="Export default reducer" toReformat="true" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="duck" value="const $ACTION$ = 'qoints/$DUCK_NAME$/$ACTION$';&#10;export const $ACTION_CREATOR$ = $DUCK_NAME$ =&gt; ({&#10;type: $ACTION$,&#10;$DUCK_NAME$&#10;});&#10;&#10;export const $DUCK_NAME$ = state =&gt; state.$DUCK_NAME$;&#10;&#10;const defaultState = null;&#10;export default function reducer(state = defaultState, action) {&#10;switch (action.type) {&#10;case $ACTION$:&#10;return action.$DUCK_NAME$;&#10;default:&#10;return state;&#10;}&#10;}&#10;" description="Simple redux duck" toReformat="true" toShortenFQNames="true">
    <variable name="ACTION" expression="" defaultValue="&quot;ACTION_CONSTANT&quot;" alwaysStopAt="true" />
    <variable name="ACTION_CREATOR" expression="" defaultValue="&quot;receiveDuckName&quot;" alwaysStopAt="true" />
    <variable name="DUCK_NAME" expression="" defaultValue="&quot;duckName&quot;" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="depr" value="const {$PROP$} = this.props;" description="Destruct props" toReformat="false" toShortenFQNames="true">
    <variable name="PROP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="imd" value="import $COMPONENT$ from '$PATH$$COMPONENT_FILE$';$END$" description="Import default component" toReformat="true" toShortenFQNames="true">
    <variable name="PATH" expression="snakeCase(String)" defaultValue="'./'" alwaysStopAt="true" />
    <variable name="COMPONENT_FILE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONENT" expression="COMPONENT_FILE" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="cdm" value="componentDidMount() {&#10;$BODY$&#10;}" description="Component did mount method" toReformat="true" toShortenFQNames="true">
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="imp" value="import {$PROP$} from '$PATH$';$END$" description="Import prop" toReformat="false" toShortenFQNames="true">
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PROP" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="mac2p" value="import {connect} from 'react-redux';&#10;import {$ACTION_CREATOR$} from '$PATH$';&#10;&#10;@connect(null, {$ACTION_CREATOR$})" description="Map dispatch to props" toReformat="true" toShortenFQNames="true">
    <variable name="ACTION_CREATOR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PATH" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="dwa" value="import {APIClient} from &quot;api&quot;;&#10;import Immutable from 'seamless-immutable';&#10;&#10;const RECEIVE_$ACTION_NAME$ = 'qoints/$ACTION_PREFIX$/$DUCK_NAME$/RECEIVE_$ACTION_NAME$';&#10;const $DUCK_NAME$Api = new APIClient('$API_PATH$');&#10;export const load$UPPERCASE_DUCK_NAME$ = () =&gt; dispatch =&gt; {&#10;    $DUCK_NAME$Api.query()&#10;                                   .then($DUCK_NAME$ =&gt; dispatch({&#10;                                               type: RECEIVE_$ACTION_NAME$,&#10;                                               $DUCK_NAME$&#10;                                           })&#10;                                   );&#10;                                   };&#10;&#10;&#10;export const $DUCK_NAME$ = state =&gt; state.$STATE_PREFIX$.$DUCK_NAME$;&#10;&#10;const defaultState = Immutable([]);&#10;export default function reducer(state = defaultState, action) {&#10;    switch (action.type) {&#10;        case RECEIVE_$ACTION_NAME$:&#10;            return action.$DUCK_NAME$;&#10;        default:&#10;            return state;&#10;    }&#10;}&#10;" description="Duck with API" toReformat="true" toShortenFQNames="true">
    <variable name="DUCK_NAME" expression="camelCase(String)" defaultValue="&quot;duckName&quot;" alwaysStopAt="true" />
    <variable name="ACTION_PREFIX" expression="" defaultValue="&quot;prefix&quot;" alwaysStopAt="true" />
    <variable name="ACTION_NAME" expression="capitalizeAndUnderscore(DUCK_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="API_PATH" expression="lowercaseAndDash(DUCK_NAME)" defaultValue="&quot;api-path&quot;" alwaysStopAt="true" />
    <variable name="UPPERCASE_DUCK_NAME" expression="capitalize(DUCK_NAME)" defaultValue="" alwaysStopAt="true" />
    <variable name="STATE_PREFIX" expression="camelCase(ACTION_PREFIX)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
    </context>
  </template>
  <template name="impl" value="import {Link} from &quot;react-router&quot;;&#10;" description="Import React Router Link" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="exd" value="export default $COMPONENT$;" description="Export default component" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT" expression="" defaultValue="ComponentOrFunction" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="comre" value="import {combineReducers} from 'redux';&#10;import $REDUCER$ from './$REDUCER$';&#10;&#10;export default combineReducers({&#10;$REDUCER$,&#10;});" description="Combine Reducers" toReformat="true" toShortenFQNames="true">
    <variable name="REDUCER" expression="camelCase(String)" defaultValue="child" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="scon" value="constructor(props) {&#10;    super(props);&#10;    this.state = {&#10;      $body$&#10;    };&#10;  }" description="React state constructor" toReformat="true" toShortenFQNames="true">
    <variable name="body" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="pt" value="import PropTypes from 'prop-types';&#10;&#10;$Component$.propTypes = {&#10;  $prop$: PropTypes.$propType$.isRequired&#10;};" description="Prop types" toReformat="false" toShortenFQNames="true">
    <variable name="Component" expression="" defaultValue="&quot;Component&quot;" alwaysStopAt="true" />
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="propType" expression="" defaultValue="&quot;object&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="imab" value="import autobind from 'autobind-decorator';&#10;" description="import autobind-decorator" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="defp" value="$Component$.defaultProps = {&#10;  $prop$: $value$&#10;};&#10;" description="default props" toReformat="true" toShortenFQNames="true">
    <variable name="Component" expression="" defaultValue="&quot;Component&quot;" alwaysStopAt="true" />
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="dpr" value="$component$.defaultProps = {&#10;  $prop$: $value$,&#10;};" description="Default props declaration" toReformat="true" toShortenFQNames="true">
    <variable name="component" expression="" defaultValue="&quot;Component&quot;" alwaysStopAt="true" />
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <variable name="value" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="dest" value="const {$prop$} = this.state;" description="Destructure state" toReformat="false" toShortenFQNames="true">
    <variable name="prop" expression="" defaultValue="&quot;prop&quot;" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>